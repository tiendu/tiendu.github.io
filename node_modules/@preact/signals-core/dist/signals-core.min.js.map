{"version":3,"file":"signals-core.min.js","sources":["../src/index.ts"],"sourcesContent":["// An named symbol/brand for detecting Signal instances even when they weren't\n// created using the same signals library version.\nconst BRAND_SYMBOL = Symbol.for(\"preact-signals\");\n\n// Flags for Computed and Effect.\nconst RUNNING = 1 << 0;\nconst NOTIFIED = 1 << 1;\nconst OUTDATED = 1 << 2;\nconst DISPOSED = 1 << 3;\nconst HAS_ERROR = 1 << 4;\nconst TRACKING = 1 << 5;\n\n// A linked list node used to track dependencies (sources) and dependents (targets).\n// Also used to remember the source's last version number that the target saw.\ntype Node = {\n\t// A source whose value the target depends on.\n\t_source: Signal;\n\t_prevSource?: Node;\n\t_nextSource?: Node;\n\n\t// A target that depends on the source and should be notified when the source changes.\n\t_target: Computed | Effect;\n\t_prevTarget?: Node;\n\t_nextTarget?: Node;\n\n\t// The version number of the source that target has last seen. We use version numbers\n\t// instead of storing the source value, because source values can take arbitrary amount\n\t// of memory, and computeds could hang on to them forever because they're lazily evaluated.\n\t// Use the special value -1 to mark potentially unused but recyclable nodes.\n\t_version: number;\n\n\t// Used to remember & roll back the source's previous `._node` value when entering &\n\t// exiting a new evaluation context.\n\t_rollbackNode?: Node;\n};\n\nfunction startBatch() {\n\tbatchDepth++;\n}\n\nfunction endBatch() {\n\tif (batchDepth > 1) {\n\t\tbatchDepth--;\n\t\treturn;\n\t}\n\n\tlet error: unknown;\n\tlet hasError = false;\n\n\twhile (batchedEffect !== undefined) {\n\t\tlet effect: Effect | undefined = batchedEffect;\n\t\tbatchedEffect = undefined;\n\n\t\tbatchIteration++;\n\n\t\twhile (effect !== undefined) {\n\t\t\tconst next: Effect | undefined = effect._nextBatchedEffect;\n\t\t\teffect._nextBatchedEffect = undefined;\n\t\t\teffect._flags &= ~NOTIFIED;\n\n\t\t\tif (!(effect._flags & DISPOSED) && needsToRecompute(effect)) {\n\t\t\t\ttry {\n\t\t\t\t\teffect._callback();\n\t\t\t\t} catch (err) {\n\t\t\t\t\tif (!hasError) {\n\t\t\t\t\t\terror = err;\n\t\t\t\t\t\thasError = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\teffect = next;\n\t\t}\n\t}\n\tbatchIteration = 0;\n\tbatchDepth--;\n\n\tif (hasError) {\n\t\tthrow error;\n\t}\n}\n\n/**\n * Combine multiple value updates into one \"commit\" at the end of the provided callback.\n *\n * Batches can be nested and changes are only flushed once the outermost batch callback\n * completes.\n *\n * Accessing a signal that has been modified within a batch will reflect its updated\n * value.\n *\n * @param fn The callback function.\n * @returns The value returned by the callback.\n */\nfunction batch<T>(fn: () => T): T {\n\tif (batchDepth > 0) {\n\t\treturn fn();\n\t}\n\t/*@__INLINE__**/ startBatch();\n\ttry {\n\t\treturn fn();\n\t} finally {\n\t\tendBatch();\n\t}\n}\n\n// Currently evaluated computed or effect.\nlet evalContext: Computed | Effect | undefined = undefined;\n\n/**\n * Run a callback function that can access signal values without\n * subscribing to the signal updates.\n *\n * @param fn The callback function.\n * @returns The value returned by the callback.\n */\nfunction untracked<T>(fn: () => T): T {\n\tconst prevContext = evalContext;\n\tevalContext = undefined;\n\ttry {\n\t\treturn fn();\n\t} finally {\n\t\tevalContext = prevContext;\n\t}\n}\n\n// Effects collected into a batch.\nlet batchedEffect: Effect | undefined = undefined;\nlet batchDepth = 0;\nlet batchIteration = 0;\n\n// A global version number for signals, used for fast-pathing repeated\n// computed.peek()/computed.value calls when nothing has changed globally.\nlet globalVersion = 0;\n\nfunction addDependency(signal: Signal): Node | undefined {\n\tif (evalContext === undefined) {\n\t\treturn undefined;\n\t}\n\n\tlet node = signal._node;\n\tif (node === undefined || node._target !== evalContext) {\n\t\t/**\n\t\t * `signal` is a new dependency. Create a new dependency node, and set it\n\t\t * as the tail of the current context's dependency list. e.g:\n\t\t *\n\t\t * { A <-> B       }\n\t\t *         ↑     ↑\n\t\t *        tail  node (new)\n\t\t *               ↓\n\t\t * { A <-> B <-> C }\n\t\t *               ↑\n\t\t *              tail (evalContext._sources)\n\t\t */\n\t\tnode = {\n\t\t\t_version: 0,\n\t\t\t_source: signal,\n\t\t\t_prevSource: evalContext._sources,\n\t\t\t_nextSource: undefined,\n\t\t\t_target: evalContext,\n\t\t\t_prevTarget: undefined,\n\t\t\t_nextTarget: undefined,\n\t\t\t_rollbackNode: node,\n\t\t};\n\n\t\tif (evalContext._sources !== undefined) {\n\t\t\tevalContext._sources._nextSource = node;\n\t\t}\n\t\tevalContext._sources = node;\n\t\tsignal._node = node;\n\n\t\t// Subscribe to change notifications from this dependency if we're in an effect\n\t\t// OR evaluating a computed signal that in turn has subscribers.\n\t\tif (evalContext._flags & TRACKING) {\n\t\t\tsignal._subscribe(node);\n\t\t}\n\t\treturn node;\n\t} else if (node._version === -1) {\n\t\t// `signal` is an existing dependency from a previous evaluation. Reuse it.\n\t\tnode._version = 0;\n\n\t\t/**\n\t\t * If `node` is not already the current tail of the dependency list (i.e.\n\t\t * there is a next node in the list), then make the `node` the new tail. e.g:\n\t\t *\n\t\t * { A <-> B <-> C <-> D }\n\t\t *         ↑           ↑\n\t\t *        node   ┌─── tail (evalContext._sources)\n\t\t *         └─────│─────┐\n\t\t *               ↓     ↓\n\t\t * { A <-> C <-> D <-> B }\n\t\t *                     ↑\n\t\t *                    tail (evalContext._sources)\n\t\t */\n\t\tif (node._nextSource !== undefined) {\n\t\t\tnode._nextSource._prevSource = node._prevSource;\n\n\t\t\tif (node._prevSource !== undefined) {\n\t\t\t\tnode._prevSource._nextSource = node._nextSource;\n\t\t\t}\n\n\t\t\tnode._prevSource = evalContext._sources;\n\t\t\tnode._nextSource = undefined;\n\n\t\t\tevalContext._sources!._nextSource = node;\n\t\t\tevalContext._sources = node;\n\t\t}\n\n\t\t// We can assume that the currently evaluated effect / computed signal is already\n\t\t// subscribed to change notifications from `signal` if needed.\n\t\treturn node;\n\t}\n\treturn undefined;\n}\n\n/**\n * The base class for plain and computed signals.\n */\n//\n// A function with the same name is defined later, so we need to ignore TypeScript's\n// warning about a redeclared variable.\n//\n// The class is declared here, but later implemented with ES5-style prototypes.\n// This enables better control of the transpiled output size.\n// @ts-ignore: \"Cannot redeclare exported variable 'Signal'.\"\ndeclare class Signal<T = any> {\n\t/** @internal */\n\t_value: unknown;\n\n\t/**\n\t * @internal\n\t * Version numbers should always be >= 0, because the special value -1 is used\n\t * by Nodes to signify potentially unused but recyclable nodes.\n\t */\n\t_version: number;\n\n\t/** @internal */\n\t_node?: Node;\n\n\t/** @internal */\n\t_targets?: Node;\n\n\tconstructor(value?: T, options?: SignalOptions<T>);\n\n\t/** @internal */\n\t_refresh(): boolean;\n\n\t/** @internal */\n\t_subscribe(node: Node): void;\n\n\t/** @internal */\n\t_unsubscribe(node: Node): void;\n\n\t/** @internal */\n\t_watched?(this: Signal<T>): void;\n\n\t/** @internal */\n\t_unwatched?(this: Signal<T>): void;\n\n\tsubscribe(fn: (value: T) => void): () => void;\n\n\tname?: string;\n\n\tvalueOf(): T;\n\n\ttoString(): string;\n\n\ttoJSON(): T;\n\n\tpeek(): T;\n\n\tbrand: typeof BRAND_SYMBOL;\n\n\tget value(): T;\n\tset value(value: T);\n}\n\nexport interface SignalOptions<T = any> {\n\twatched?: (this: Signal<T>) => void;\n\tunwatched?: (this: Signal<T>) => void;\n\tname?: string;\n}\n\n/** @internal */\n// A class with the same name has already been declared, so we need to ignore\n// TypeScript's warning about a redeclared variable.\n//\n// The previously declared class is implemented here with ES5-style prototypes.\n// This enables better control of the transpiled output size.\n// @ts-ignore: \"Cannot redeclare exported variable 'Signal'.\"\nfunction Signal(this: Signal, value?: unknown, options?: SignalOptions) {\n\tthis._value = value;\n\tthis._version = 0;\n\tthis._node = undefined;\n\tthis._targets = undefined;\n\tthis._watched = options?.watched;\n\tthis._unwatched = options?.unwatched;\n\tthis.name = options?.name;\n}\n\nSignal.prototype.brand = BRAND_SYMBOL;\n\nSignal.prototype._refresh = function () {\n\treturn true;\n};\n\nSignal.prototype._subscribe = function (node) {\n\tconst targets = this._targets;\n\tif (targets !== node && node._prevTarget === undefined) {\n\t\tnode._nextTarget = targets;\n\t\tthis._targets = node;\n\n\t\tif (targets !== undefined) {\n\t\t\ttargets._prevTarget = node;\n\t\t} else {\n\t\t\tuntracked(() => {\n\t\t\t\tthis._watched?.call(this);\n\t\t\t});\n\t\t}\n\t}\n};\n\nSignal.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the signal has any subscribers to begin with.\n\tif (this._targets !== undefined) {\n\t\tconst prev = node._prevTarget;\n\t\tconst next = node._nextTarget;\n\t\tif (prev !== undefined) {\n\t\t\tprev._nextTarget = next;\n\t\t\tnode._prevTarget = undefined;\n\t\t}\n\n\t\tif (next !== undefined) {\n\t\t\tnext._prevTarget = prev;\n\t\t\tnode._nextTarget = undefined;\n\t\t}\n\n\t\tif (node === this._targets) {\n\t\t\tthis._targets = next;\n\t\t\tif (next === undefined) {\n\t\t\t\tuntracked(() => {\n\t\t\t\t\tthis._unwatched?.call(this);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n};\n\nSignal.prototype.subscribe = function (fn) {\n\treturn effect(\n\t\t() => {\n\t\t\tconst value = this.value;\n\t\t\tconst prevContext = evalContext;\n\t\t\tevalContext = undefined;\n\t\t\ttry {\n\t\t\t\tfn(value);\n\t\t\t} finally {\n\t\t\t\tevalContext = prevContext;\n\t\t\t}\n\t\t},\n\t\t{ name: \"sub\" }\n\t);\n};\n\nSignal.prototype.valueOf = function () {\n\treturn this.value;\n};\n\nSignal.prototype.toString = function () {\n\treturn this.value + \"\";\n};\n\nSignal.prototype.toJSON = function () {\n\treturn this.value;\n};\n\nSignal.prototype.peek = function () {\n\tconst prevContext = evalContext;\n\tevalContext = undefined;\n\ttry {\n\t\treturn this.value;\n\t} finally {\n\t\tevalContext = prevContext;\n\t}\n};\n\nObject.defineProperty(Signal.prototype, \"value\", {\n\tget(this: Signal) {\n\t\tconst node = addDependency(this);\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\treturn this._value;\n\t},\n\tset(this: Signal, value) {\n\t\tif (value !== this._value) {\n\t\t\tif (batchIteration > 100) {\n\t\t\t\tthrow new Error(\"Cycle detected\");\n\t\t\t}\n\n\t\t\tthis._value = value;\n\t\t\tthis._version++;\n\t\t\tglobalVersion++;\n\n\t\t\t/**@__INLINE__*/ startBatch();\n\t\t\ttry {\n\t\t\t\tfor (\n\t\t\t\t\tlet node = this._targets;\n\t\t\t\t\tnode !== undefined;\n\t\t\t\t\tnode = node._nextTarget\n\t\t\t\t) {\n\t\t\t\t\tnode._target._notify();\n\t\t\t\t}\n\t\t\t} finally {\n\t\t\t\tendBatch();\n\t\t\t}\n\t\t}\n\t},\n});\n\n/**\n * Create a new plain signal.\n *\n * @param value The initial value for the signal.\n * @returns A new signal.\n */\nexport function signal<T>(value: T, options?: SignalOptions<T>): Signal<T>;\nexport function signal<T = undefined>(): Signal<T | undefined>;\nexport function signal<T>(value?: T, options?: SignalOptions<T>): Signal<T> {\n\treturn new Signal(value, options);\n}\n\nfunction needsToRecompute(target: Computed | Effect): boolean {\n\t// Check the dependencies for changed values. The dependency list is already\n\t// in order of use. Therefore if multiple dependencies have changed values, only\n\t// the first used dependency is re-evaluated at this point.\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tif (\n\t\t\t// If the dependency has definitely been updated since its version number\n\t\t\t// was observed, then we need to recompute. This first check is not strictly\n\t\t\t// necessary for correctness, but allows us to skip the refresh call if the\n\t\t\t// dependency has already been updated.\n\t\t\tnode._source._version !== node._version ||\n\t\t\t// Refresh the dependency. If there's something blocking the refresh (e.g. a\n\t\t\t// dependency cycle), then we need to recompute.\n\t\t\t!node._source._refresh() ||\n\t\t\t// If the dependency got a new version after the refresh, then we need to recompute.\n\t\t\tnode._source._version !== node._version\n\t\t) {\n\t\t\treturn true;\n\t\t}\n\t}\n\t// If none of the dependencies have changed values since last recompute then\n\t// there's no need to recompute.\n\treturn false;\n}\n\nfunction prepareSources(target: Computed | Effect) {\n\t/**\n\t * 1. Mark all current sources as re-usable nodes (version: -1)\n\t * 2. Set a rollback node if the current node is being used in a different context\n\t * 3. Point 'target._sources' to the tail of the doubly-linked list, e.g:\n\t *\n\t *    { undefined <- A <-> B <-> C -> undefined }\n\t *                   ↑           ↑\n\t *                   │           └──────┐\n\t * target._sources = A; (node is head)  │\n\t *                   ↓                  │\n\t * target._sources = C; (node is tail) ─┘\n\t */\n\tfor (\n\t\tlet node = target._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tconst rollbackNode = node._source._node;\n\t\tif (rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = rollbackNode;\n\t\t}\n\t\tnode._source._node = node;\n\t\tnode._version = -1;\n\n\t\tif (node._nextSource === undefined) {\n\t\t\ttarget._sources = node;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nfunction cleanupSources(target: Computed | Effect) {\n\tlet node = target._sources;\n\tlet head: Node | undefined = undefined;\n\n\t/**\n\t * At this point 'target._sources' points to the tail of the doubly-linked list.\n\t * It contains all existing sources + new sources in order of use.\n\t * Iterate backwards until we find the head node while dropping old dependencies.\n\t */\n\twhile (node !== undefined) {\n\t\tconst prev = node._prevSource;\n\n\t\t/**\n\t\t * The node was not re-used, unsubscribe from its change notifications and remove itself\n\t\t * from the doubly-linked list. e.g:\n\t\t *\n\t\t * { A <-> B <-> C }\n\t\t *         ↓\n\t\t *    { A <-> C }\n\t\t */\n\t\tif (node._version === -1) {\n\t\t\tnode._source._unsubscribe(node);\n\n\t\t\tif (prev !== undefined) {\n\t\t\t\tprev._nextSource = node._nextSource;\n\t\t\t}\n\t\t\tif (node._nextSource !== undefined) {\n\t\t\t\tnode._nextSource._prevSource = prev;\n\t\t\t}\n\t\t} else {\n\t\t\t/**\n\t\t\t * The new head is the last node seen which wasn't removed/unsubscribed\n\t\t\t * from the doubly-linked list. e.g:\n\t\t\t *\n\t\t\t * { A <-> B <-> C }\n\t\t\t *   ↑     ↑     ↑\n\t\t\t *   │     │     └ head = node\n\t\t\t *   │     └ head = node\n\t\t\t *   └ head = node\n\t\t\t */\n\t\t\thead = node;\n\t\t}\n\n\t\tnode._source._node = node._rollbackNode;\n\t\tif (node._rollbackNode !== undefined) {\n\t\t\tnode._rollbackNode = undefined;\n\t\t}\n\n\t\tnode = prev;\n\t}\n\n\ttarget._sources = head;\n}\n\n/**\n * The base class for computed signals.\n */\ndeclare class Computed<T = any> extends Signal<T> {\n\t_fn: () => T;\n\t_sources?: Node;\n\t_globalVersion: number;\n\t_flags: number;\n\n\tconstructor(fn: () => T, options?: SignalOptions<T>);\n\n\t_notify(): void;\n\tget value(): T;\n}\n\n/** @internal */\nfunction Computed(this: Computed, fn: () => unknown, options?: SignalOptions) {\n\tSignal.call(this, undefined);\n\n\tthis._fn = fn;\n\tthis._sources = undefined;\n\tthis._globalVersion = globalVersion - 1;\n\tthis._flags = OUTDATED;\n\tthis._watched = options?.watched;\n\tthis._unwatched = options?.unwatched;\n\tthis.name = options?.name;\n}\n\nComputed.prototype = new Signal() as Computed;\n\nComputed.prototype._refresh = function () {\n\tthis._flags &= ~NOTIFIED;\n\n\tif (this._flags & RUNNING) {\n\t\treturn false;\n\t}\n\n\t// If this computed signal has subscribed to updates from its dependencies\n\t// (TRACKING flag set) and none of them have notified about changes (OUTDATED\n\t// flag not set), then the computed value can't have changed.\n\tif ((this._flags & (OUTDATED | TRACKING)) === TRACKING) {\n\t\treturn true;\n\t}\n\tthis._flags &= ~OUTDATED;\n\n\tif (this._globalVersion === globalVersion) {\n\t\treturn true;\n\t}\n\tthis._globalVersion = globalVersion;\n\n\t// Mark this computed signal running before checking the dependencies for value\n\t// changes, so that the RUNNING flag can be used to notice cyclical dependencies.\n\tthis._flags |= RUNNING;\n\tif (this._version > 0 && !needsToRecompute(this)) {\n\t\tthis._flags &= ~RUNNING;\n\t\treturn true;\n\t}\n\n\tconst prevContext = evalContext;\n\ttry {\n\t\tprepareSources(this);\n\t\tevalContext = this;\n\t\tconst value = this._fn();\n\t\tif (\n\t\t\tthis._flags & HAS_ERROR ||\n\t\t\tthis._value !== value ||\n\t\t\tthis._version === 0\n\t\t) {\n\t\t\tthis._value = value;\n\t\t\tthis._flags &= ~HAS_ERROR;\n\t\t\tthis._version++;\n\t\t}\n\t} catch (err) {\n\t\tthis._value = err;\n\t\tthis._flags |= HAS_ERROR;\n\t\tthis._version++;\n\t}\n\tevalContext = prevContext;\n\tcleanupSources(this);\n\tthis._flags &= ~RUNNING;\n\treturn true;\n};\n\nComputed.prototype._subscribe = function (node) {\n\tif (this._targets === undefined) {\n\t\tthis._flags |= OUTDATED | TRACKING;\n\n\t\t// A computed signal subscribes lazily to its dependencies when it\n\t\t// gets its first subscriber.\n\t\tfor (\n\t\t\tlet node = this._sources;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextSource\n\t\t) {\n\t\t\tnode._source._subscribe(node);\n\t\t}\n\t}\n\tSignal.prototype._subscribe.call(this, node);\n};\n\nComputed.prototype._unsubscribe = function (node) {\n\t// Only run the unsubscribe step if the computed signal has any subscribers.\n\tif (this._targets !== undefined) {\n\t\tSignal.prototype._unsubscribe.call(this, node);\n\n\t\t// Computed signal unsubscribes from its dependencies when it loses its last subscriber.\n\t\t// This makes it possible for unreferences subgraphs of computed signals to get garbage collected.\n\t\tif (this._targets === undefined) {\n\t\t\tthis._flags &= ~TRACKING;\n\n\t\t\tfor (\n\t\t\t\tlet node = this._sources;\n\t\t\t\tnode !== undefined;\n\t\t\t\tnode = node._nextSource\n\t\t\t) {\n\t\t\t\tnode._source._unsubscribe(node);\n\t\t\t}\n\t\t}\n\t}\n};\n\nComputed.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= OUTDATED | NOTIFIED;\n\n\t\tfor (\n\t\t\tlet node = this._targets;\n\t\t\tnode !== undefined;\n\t\t\tnode = node._nextTarget\n\t\t) {\n\t\t\tnode._target._notify();\n\t\t}\n\t}\n};\n\nObject.defineProperty(Computed.prototype, \"value\", {\n\tget(this: Computed) {\n\t\tif (this._flags & RUNNING) {\n\t\t\tthrow new Error(\"Cycle detected\");\n\t\t}\n\t\tconst node = addDependency(this);\n\t\tthis._refresh();\n\t\tif (node !== undefined) {\n\t\t\tnode._version = this._version;\n\t\t}\n\t\tif (this._flags & HAS_ERROR) {\n\t\t\tthrow this._value;\n\t\t}\n\t\treturn this._value;\n\t},\n});\n\n/**\n * An interface for read-only signals.\n */\ninterface ReadonlySignal<T = any> {\n\treadonly value: T;\n\tpeek(): T;\n\n\tsubscribe(fn: (value: T) => void): () => void;\n\tvalueOf(): T;\n\ttoString(): string;\n\ttoJSON(): T;\n\tbrand: typeof BRAND_SYMBOL;\n}\n\n/**\n * Create a new signal that is computed based on the values of other signals.\n *\n * The returned computed signal is read-only, and its value is automatically\n * updated when any signals accessed from within the callback function change.\n *\n * @param fn The effect callback.\n * @returns A new read-only signal.\n */\nfunction computed<T>(\n\tfn: () => T,\n\toptions?: SignalOptions<T>\n): ReadonlySignal<T> {\n\treturn new Computed(fn, options);\n}\n\nfunction cleanupEffect(effect: Effect) {\n\tconst cleanup = effect._cleanup;\n\teffect._cleanup = undefined;\n\n\tif (typeof cleanup === \"function\") {\n\t\t/*@__INLINE__**/ startBatch();\n\n\t\t// Run cleanup functions always outside of any context.\n\t\tconst prevContext = evalContext;\n\t\tevalContext = undefined;\n\t\ttry {\n\t\t\tcleanup();\n\t\t} catch (err) {\n\t\t\teffect._flags &= ~RUNNING;\n\t\t\teffect._flags |= DISPOSED;\n\t\t\tdisposeEffect(effect);\n\t\t\tthrow err;\n\t\t} finally {\n\t\t\tevalContext = prevContext;\n\t\t\tendBatch();\n\t\t}\n\t}\n}\n\nfunction disposeEffect(effect: Effect) {\n\tfor (\n\t\tlet node = effect._sources;\n\t\tnode !== undefined;\n\t\tnode = node._nextSource\n\t) {\n\t\tnode._source._unsubscribe(node);\n\t}\n\teffect._fn = undefined;\n\teffect._sources = undefined;\n\n\tcleanupEffect(effect);\n}\n\nfunction endEffect(this: Effect, prevContext?: Computed | Effect) {\n\tif (evalContext !== this) {\n\t\tthrow new Error(\"Out-of-order effect\");\n\t}\n\tcleanupSources(this);\n\tevalContext = prevContext;\n\n\tthis._flags &= ~RUNNING;\n\tif (this._flags & DISPOSED) {\n\t\tdisposeEffect(this);\n\t}\n\tendBatch();\n}\n\ntype EffectFn =\n\t| ((this: { dispose: () => void }) => void | (() => void))\n\t| (() => void | (() => void));\n\n/**\n * The base class for reactive effects.\n */\ndeclare class Effect {\n\t_fn?: EffectFn;\n\t_cleanup?: () => void;\n\t_sources?: Node;\n\t_nextBatchedEffect?: Effect;\n\t_flags: number;\n\tname?: string;\n\n\tconstructor(fn: EffectFn, options?: EffectOptions);\n\n\t_callback(): void;\n\t_start(): () => void;\n\t_notify(): void;\n\t_dispose(): void;\n\tdispose(): void;\n}\n\nexport interface EffectOptions {\n\tname?: string;\n}\n\n/** @internal */\nfunction Effect(this: Effect, fn: EffectFn, options?: EffectOptions) {\n\tthis._fn = fn;\n\tthis._cleanup = undefined;\n\tthis._sources = undefined;\n\tthis._nextBatchedEffect = undefined;\n\tthis._flags = TRACKING;\n\tthis.name = options?.name;\n}\n\nEffect.prototype._callback = function () {\n\tconst finish = this._start();\n\ttry {\n\t\tif (this._flags & DISPOSED) return;\n\t\tif (this._fn === undefined) return;\n\n\t\tconst cleanup = this._fn();\n\t\tif (typeof cleanup === \"function\") {\n\t\t\tthis._cleanup = cleanup;\n\t\t}\n\t} finally {\n\t\tfinish();\n\t}\n};\n\nEffect.prototype._start = function () {\n\tif (this._flags & RUNNING) {\n\t\tthrow new Error(\"Cycle detected\");\n\t}\n\tthis._flags |= RUNNING;\n\tthis._flags &= ~DISPOSED;\n\tcleanupEffect(this);\n\tprepareSources(this);\n\n\t/*@__INLINE__**/ startBatch();\n\tconst prevContext = evalContext;\n\tevalContext = this;\n\treturn endEffect.bind(this, prevContext);\n};\n\nEffect.prototype._notify = function () {\n\tif (!(this._flags & NOTIFIED)) {\n\t\tthis._flags |= NOTIFIED;\n\t\tthis._nextBatchedEffect = batchedEffect;\n\t\tbatchedEffect = this;\n\t}\n};\n\nEffect.prototype._dispose = function () {\n\tthis._flags |= DISPOSED;\n\n\tif (!(this._flags & RUNNING)) {\n\t\tdisposeEffect(this);\n\t}\n};\n\nEffect.prototype.dispose = function () {\n\tthis._dispose();\n};\n/**\n * Create an effect to run arbitrary code in response to signal changes.\n *\n * An effect tracks which signals are accessed within the given callback\n * function `fn`, and re-runs the callback when those signals change.\n *\n * The callback may return a cleanup function. The cleanup function gets\n * run once, either when the callback is next called or when the effect\n * gets disposed, whichever happens first.\n *\n * @param fn The effect callback.\n * @returns A function for disposing the effect.\n */\nfunction effect(fn: EffectFn, options?: EffectOptions): () => void {\n\tconst effect = new Effect(fn, options);\n\ttry {\n\t\teffect._callback();\n\t} catch (err) {\n\t\teffect._dispose();\n\t\tthrow err;\n\t}\n\t// Return a bound function instead of a wrapper like `() => effect._dispose()`,\n\t// because bound functions seem to be just as fast and take up a lot less memory.\n\tconst dispose = effect._dispose.bind(effect);\n\t(dispose as any)[Symbol.dispose] = dispose;\n\treturn dispose as any;\n}\n\nexport {\n\tcomputed,\n\teffect,\n\tbatch,\n\tuntracked,\n\tSignal,\n\tReadonlySignal,\n\tEffect,\n\tComputed,\n};\n"],"names":["g","f","exports","module","define","amd","globalThis","self","preactSignalsCore","this","BRAND_SYMBOL","Symbol","endBatch","batchDepth","error","hasError","undefined","batchedEffect","effect","batchIteration","next","_nextBatchedEffect","_flags","needsToRecompute","_callback","err","evalContext","untracked","fn","prevContext","globalVersion","addDependency","signal","node","_node","_target","_version","_source","_prevSource","_sources","_nextSource","_prevTarget","_nextTarget","_rollbackNode","_subscribe","Signal","value","options","_value","_targets","_watched","watched","_unwatched","unwatched","name","prototype","brand","_refresh","_this","targets","_this$_watched","call","_unsubscribe","_this2","prev","_this2$_unwatched","subscribe","_this3","valueOf","toString","toJSON","peek","Object","defineProperty","get","set","Error","_notify","target","prepareSources","rollbackNode","cleanupSources","head","Computed","_fn","_globalVersion","OUTDATED","cleanupEffect","cleanup","_cleanup","disposeEffect","endEffect","Effect","finish","_start","bind","_dispose","dispose","batch","computed"],"mappings":"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"}