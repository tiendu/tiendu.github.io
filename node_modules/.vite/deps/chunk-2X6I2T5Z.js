import {
  E,
  G,
  _
} from "./chunk-USNLTOW7.js";

// node_modules/@astrojs/preact/dist/static-html.js
var StaticHtml = ({ value, name, hydrate = true }) => {
  if (!value) return null;
  const tagName = hydrate ? "astro-slot" : "astro-static-slot";
  return _(tagName, { name, dangerouslySetInnerHTML: { __html: value } });
};
StaticHtml.shouldComponentUpdate = () => false;
var static_html_default = StaticHtml;

// node_modules/@astrojs/preact/dist/client.js
var sharedSignalMap = /* @__PURE__ */ new Map();
var client_default = (element) => async (Component, props, { default: children, ...slotted }, { client }) => {
  if (!element.hasAttribute("ssr")) return;
  for (const [key, value] of Object.entries(slotted)) {
    props[key] = _(static_html_default, { value, name: key });
  }
  let signalsRaw = element.dataset.preactSignals;
  if (signalsRaw) {
    const { signal } = await import("./signals.module-TZH2XAMS.js");
    let signals = JSON.parse(
      element.dataset.preactSignals
    );
    for (const [propName, signalId] of Object.entries(signals)) {
      if (Array.isArray(signalId)) {
        signalId.forEach(([id, indexOrKeyInProps]) => {
          const mapValue = props[propName][indexOrKeyInProps];
          let valueOfSignal = mapValue;
          if (typeof indexOrKeyInProps !== "string") {
            valueOfSignal = mapValue[0];
            indexOrKeyInProps = mapValue[1];
          }
          if (!sharedSignalMap.has(id)) {
            const signalValue = signal(valueOfSignal);
            sharedSignalMap.set(id, signalValue);
          }
          props[propName][indexOrKeyInProps] = sharedSignalMap.get(id);
        });
      } else {
        if (!sharedSignalMap.has(signalId)) {
          const signalValue = signal(props[propName]);
          sharedSignalMap.set(signalId, signalValue);
        }
        props[propName] = sharedSignalMap.get(signalId);
      }
    }
  }
  const bootstrap = client !== "only" ? G : E;
  bootstrap(
    _(Component, props, children != null ? _(static_html_default, { value: children }) : children),
    element
  );
  element.addEventListener("astro:unmount", () => E(null, element), { once: true });
};

export {
  client_default
};
//# sourceMappingURL=chunk-2X6I2T5Z.js.map
